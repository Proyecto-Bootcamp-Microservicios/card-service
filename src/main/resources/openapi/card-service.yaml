openapi: 3.0.3
info:
  title: Card Service API
  version: 1.0.0
  description: API for managing debit & credit cards

servers:
  - url: /api/v1

paths:
  /credit-cards:
    get:
      summary: Get all credit cards
      operationId: getAllCreditCards
      parameters:
        - name: customerId
          in: query
          required: false
          schema:
            type: string
          description: Filter credit cards by customer ID
          example: "68a0cdde7d68c910da0bc239"
        - name: isActive
          in: query
          required: false
          schema:
            type: boolean
          description: Filter credit cards by active status (default = true)
          example: true
      responses:
        '200':
          description: List of credit cards
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CreditCardResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      summary: Create a new credit card
      operationId: createCreditCard
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreditCardCreateRequest'
      responses:
        '201':
          description: Credit card created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreditCardResponse'
        '400':
          description: Bad request - Validation errors
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: Business rule violation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                personalCreditCardExists:
                  summary: Personal customer already has a credit card
                  value:
                    code: "PERSON_ALREADY_HAS_CREDIT_CARD"
                    message: "Personal customers can only have one active credit card"
                    timestamp: "2025-08-24T10:15:30Z"
                customerNotFound:
                  summary: Customer not found
                  value:
                    code: "CUSTOMER_NOT_FOUND"
                    message: "Customer with provided ID does not exist"
                    timestamp: "2025-08-24T10:15:30Z"

  /credit-cards/{id}:
    get:
      summary: Get a credit card by ID
      operationId: getCreditCardById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Credit card found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreditCardResponse'
        '404':
          description: Credit card not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      summary: Update a credit card by ID
      operationId: updateCreditCard
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreditCardUpdateRequest'
      responses:
        '200':
          description: Credit card updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreditCardResponse'
        '404':
          description: Credit card not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '400':
          description: Bad request - Validation errors
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      summary: Delete a credit card by ID
      operationId: deleteCreditCard
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Credit card deleted
        '404':
          description: Credit card not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /credit-cards/{id}/deactivate:
    patch:
      summary: Soft delete (deactivate) a credit card by ID
      description: Marks the credit card as inactive without physically removing it
      operationId: deactivateCreditCard
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Credit card deactivated (isActive set to false)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreditCardResponse'
        '404':
          description: Credit card not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /credit-cards/{id}/activate:
    patch:
      summary: Reactivate a credit card by ID
      description: Marks the credit card as active again
      operationId: activateCreditCard
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Credit card activated (isActive set to true)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreditCardResponse'
        '404':
          description: Credit card not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /credit-cards/customers/{customerId}/has-active-card:
    get:
      summary: Check if customer has an active credit card
      description: Validates if a customer has at least one active credit card for account eligibility requirements
      operationId: checkCustomerHasActiveCard
      parameters:
        - name: customerId
          in: path
          required: true
          schema:
            type: string
          description: Customer ID to check for active credit cards
          example: "68a0cdde7d68c910da0bc239"
      responses:
        '200':
          description: Customer credit card validation result
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerCardValidationResponse'
        '404':
          description: Customer not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /credit-cards/{cardNumber}/authorize-charge:
    patch:
      summary: Authorize credit card charge
      description: Decreases the availableCredit and increases the currentBalance if enough credit is available.
      operationId: authorizeCharge
      parameters:
        - name: cardNumber
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChargeAuthorizationRequest'
      responses:
        '200':
          description: Credit reserved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChargeAuthorizationResponse'
        '400':
          description: Insufficient credit or invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Card not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /credit-cards/{cardNumber}/process-payment:
    post:
      summary: Process payment validation and update balances
      description: Validates payment and updates card balances if successful
      operationId: processCardPayment
      parameters:
        - name: cardNumber
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PaymentProcessRequest'
      responses:
        '200':
          description: Payment processed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentProcessResponse'
        '400':
          description: Payment validation failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Card not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /credit-cards/{cardNumber}/balance:
    get:
      summary: Get credit card balance information
      operationId: getCardBalance
      parameters:
        - name: cardNumber
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Card balance information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreditCardBalanceResponse'
        '404':
          description: Card not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /credit-cards/customers/{customerId}/daily-averages:
    get:
      summary: Get customer's credit cards daily average balances
      operationId: getCustomerDailyAverages
      parameters:
        - name: customerId
          in: path
          required: true
          schema:
            type: string
        - name: year
          in: query
          required: true
          schema:
            type: integer
          example: 2025
        - name: month
          in: query
          required: true
          schema:
            type: integer
            minimum: 1
            maximum: 12
          example: 8
      responses:
        '200':
          description: Daily balance average
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerDailyAverageResponse'
        '404':
          description: Customer not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /debit-cards:
    get:
      summary: Get all debit cards
      operationId: getAllDebitCards
      parameters:
        - name: customerId
          in: query
          required: false
          schema:
            type: string
          description: Filter debit cards by customer ID
        - name: isActive
          in: query
          required: false
          schema:
            type: boolean
          description: Filter debit cards by active status (default = true)
      responses:
        '200':
          description: List of debit cards
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DebitCardResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      summary: Create a new debit card
      operationId: createDebitCard
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DebitCardCreateRequest'
      responses:
        '201':
          description: Debit card created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DebitCardResponse'
        '400':
          description: Bad request - Validation errors
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: Business rule violation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /debit-cards/{id}:
    get:
      summary: Get a debit card by ID
      operationId: getDebitCardById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Debit card found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DebitCardResponse'
        '404':
          description: Debit card not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      summary: Update a debit card by ID
      operationId: updateDebitCard
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DebitCardUpdateRequest'
      responses:
        '200':
          description: Debit card updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DebitCardResponse'
        '404':
          description: Debit card not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '400':
          description: Bad request - Validation errors
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      summary: Delete a debit card by ID
      operationId: deleteDebitCard
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Debit card deleted
        '404':
          description: Debit card not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /debit-cards/{id}/deactivate:
    patch:
      summary: Deactivate a debit card by ID
      operationId: deactivateDebitCard
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Debit card deactivated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DebitCardResponse'
        '404':
          description: Debit card not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /debit-cards/{id}/activate:
    patch:
      summary: Activate a debit card by ID
      operationId: activateDebitCard
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Debit card activated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DebitCardResponse'
        '404':
          description: Debit card not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # DEBIT CARD SPECIFIC OPERATIONS
  /debit-cards/{id}/associate-account:
    post:
      summary: Associate an account to debit card
      description: Associates a bank account to the debit card. First account becomes primary if none exists.
      operationId: associateAccountToDebitCard
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AssociateAccountRequest'
      responses:
        '200':
          description: Account associated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DebitCardResponse'
        '400':
          description: Invalid account or already associated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Debit card not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /debit-cards/{id}/disassociate-account:
    delete:
      summary: Disassociate an account from debit card
      description: Removes account association. Cannot remove primary account if other accounts exist.
      operationId: disassociateAccountFromDebitCard
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
        - name: accountId
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Account disassociated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DebitCardResponse'
        '400':
          description: Cannot remove primary account or account not associated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Debit card not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /debit-cards/{cardNumber}/process-purchase:
    post:
      summary: Process debit card purchase/withdrawal
      description: Processes purchase using cascade logic across associated accounts
      operationId: processDebitCardPurchase
      parameters:
        - name: cardNumber
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DebitPurchaseRequest'
      responses:
        '200':
          description: Purchase processed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DebitPurchaseResponse'
        '400':
          description: Insufficient funds or invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Debit card not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /debit-cards/{cardId}/primary-account/balance:
    get:
      summary: Get primary account balance via debit card
      description: Retrieves the balance of the primary account associated with the debit card
      operationId: getDebitCardPrimaryAccountBalance
      parameters:
        - name: cardId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Primary account balance retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PrimaryAccountBalanceResponse'
        '404':
          description: Debit card not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /cards/{cardId}/movements:
    get:
      summary: Get card movements (last 10)
      description: Retrieves the last 10 movements for credit or debit card
      operationId: getCardMovements
      parameters:
        - name: cardId
          in: path
          required: true
          schema:
            type: string
        - name: limit
          in: query
          required: false
          schema:
            type: integer
            default: 10
            maximum: 50
      responses:
        '200':
          description: Card movements retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CardMovementsResponse'
        '404':
          description: Card not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /credit-cards/customers/{customerId}/product-eligibility:
    get:
      summary: Check customer eligibility for new products
      description: Validates if customer can acquire new products (no overdue credit debts)
      operationId: checkCustomerProductEligibility
      parameters:
        - name: customerId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Eligibility status retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductEligibilityResponse'
        '404':
          description: Customer not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /cards/customers/{customerId}/cards-summary:
    get:
      summary: Get customer cards summary
      description: Returns all cards (credit and debit) for a specific customer
      operationId: getCustomerCardsSummary
      parameters:
        - name: customerId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Customer cards summary retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerCardsSummaryResponse'
        '404':
          description: Customer not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /cards/reports/period:
    get:
      summary: Generate cards report for specific period
      description: Returns aggregated statistics for all card types in specified period
      operationId: generateCardsPeriodicReport
      parameters:
        - name: startDate
          in: query
          required: true
          schema:
            type: string
            format: date
        - name: endDate
          in: query
          required: true
          schema:
            type: string
            format: date
      responses:
        '200':
          description: Cards report generated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CardsPeriodicReportResponse'
        '400':
          description: Invalid date range
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
components:
  schemas:
    CreditCardCreateRequest:
      type: object
      properties:
        customerId:
          type: string
          example: "68a0cdde7d68c910da0bc239"
        creditLimit:
          type: number
          format: double
          example: 10000.00
        availableCredit:
          type: number
          format: double
          example: 8000
        currentBalance:
          type: number
          format: double
          example: 2000
      required:
        - creditLimit

    CreditCardUpdateRequest:
      type: object
      properties:
        creditLimit:
          type: number
          format: double
          example: 12000.00
        availableCredit:
          type: number
          format: double
          example: 8000
        currentBalance:
          type: number
          format: double
          example: 4000
        isActive:
          type: boolean
          example: true
      required:
        - creditLimit
        - availableCredit
        - currentBalance
        - isActive

    ChargeAuthorizationRequest:
      type: object
      required:
        - amount
      properties:
        amount:
          type: number
          format: double
          minimum: 0.01
          description: Amount to authorize
          example: 150.00

    TransactionCreateRequest:
      type: object
      required:
        - amount
      properties:
        cardId:
          type: string
          description: Card ID
          example: "64f3cbb5f8a1e53d2f7c34e1"
        amount:
          type: number
          format: double
          minimum: 0.01
          description: Amount to charge
          example: 150.00
        transactionType:
          type: string
          description: Transaction type (e.g., CHARGE or PAYMENT)
          example: "CHARGE"
        authorizationCode:
          type: string
          description: Authorization code generated
          example: "AUTH123456"
        status:
          type: string
          description: Transaction status (e.g., APPROVED)
          example: "APPROVED"
        timestamp:
          type: string
          format: date-time
          description: When the transaction occurred
          example: "2025-09-07T15:45:00Z"


    PaymentProcessRequest:
      type: object
      required:
        - amount
      properties:
        amount:
          type: number
          format: double
          minimum: 0.01
          description: Payment amount
          example: 500.00

    PaymentProcessResponse:
      type: object
      required:
        - success
        - cardId
        - requestedAmount
        - processedAt
      properties:
        success:
          type: boolean
          description: Whether the payment was successful
          example: true
        cardId:
          type: string
          description: Card ID
          example: "64f3cbb5f8a1e53d2f7c34e1"
        requestedAmount:
          type: number
          format: double
          description: Requested payment amount
          example: 500.00
        actualPaymentAmount:
          type: number
          format: double
          description: Actual amount paid (only if success = true)
          example: 500.00
        availableCreditAfter:
          type: number
          format: double
          description: Available credit after payment (only if success = true)
          example: 9500.00
        currentBalanceAfter:
          type: number
          format: double
          description: Current balance after payment (only if success = true)
          example: 500.00
        errorCode:
          type: string
          enum: [ CARD_INACTIVE, INVALID_AMOUNT, OVERPAYMENT_NOT_ALLOWED, ZERO_CURRENT_BALANCE ]
          description: Error code (only if success = false)
          example: "OVERPAYMENT_NOT_ALLOWED"
        errorMessage:
          type: string
          description: Error message (only if success = false)
          example: "Payment amount exceeds current balance"
        processedAt:
          type: string
          format: date-time
          description: Processing timestamp
          example: "2025-08-30T15:30:00Z"
    ChargeAuthorizationResponse:
      type: object
      required:
        - status
        - authorizedAmount
        - availableCreditAfter
        - processedAt
      properties:
        authorizationCode:
          type: string
          description: Authorization code (null if it was rejected)
          example: "AUTH-456789"
        status:
          type: string
          enum: [ APPROVED, DECLINED ]
          description: Authorization status
          example: "APPROVED"
        authorizedAmount:
          type: number
          format: double
          description: Authorized amount (0 if it was rejected)
          example: 150.00
        availableCreditAfter:
          type: number
          format: double
          description: Available credit after the transaction
          example: 850.00
        processedAt:
          type: string
          format: date-time
          description: Processing Timestamp
          example: "2025-08-28T10:30:05Z"
        declineReason:
          type: string
          enum: [ INSUFFICIENT_CREDIT, CARD_INACTIVE ]
          description: Reject reason (only if status = DECLINED)
          example: "INSUFFICIENT_CREDIT"

    CreditCardResponse:
      type: object
      properties:
        id:
          type: string
          example: "64f3cbb5f8a1e53d2f7c34e1"
        cardNumber:
          type: string
          example: "1234-5678-9123-4567"
        customerId:
          type: string
          example: "68a0cdde7d68c910da0bc239"
        creditCardType:
          type: string
          enum: [ "PERSONAL", "ENTERPRISE" ]
          example: "PERSONAL"
        creditLimit:
          type: number
          format: double
          example: 10000.00
        availableCredit:
          type: number
          format: double
          example: 6000
        currentBalance:
          type: number
          format: double
          example: 4000
        isActive:
          type: boolean
          example: true
        paymentDueDate:
          type: string
          format: date
          example: "2025-09-15"
          description: "Payment due date"
        minimumPayment:
          type: number
          format: double
          example: 200.00
          description: "Minimum required payment"
        isOverdue:
          type: boolean
          example: false
          description: "Indicates whether the card has overdue payments"
        overdueDays:
          type: integer
          example: 0
          description: "Number of overdue days"
        createdAt:
          type: string
          format: date-time
          example: 2025-08-18T10:15:30Z
        updatedAt:
          type: string
          format: date-time
          example: 2025-08-18T10:15:30Z
    CreditCardBalanceResponse:
      type: object
      required:
        - cardId
        - cardNumber
        - creditLimit
        - availableCredit
        - currentBalance
        - utilizationPercentage
      properties:
        cardId:
          type: string
          description: Card ID
          example: "64f3cbb5f8a1e53d2f7c34e1"
        cardNumber:
          type: string
          description: Card number
          example: "1234567891234567"
        creditLimit:
          type: number
          format: double
          description: Total credit limit
          example: 10000.00
        availableCredit:
          type: number
          format: double
          description: Available credit
          example: 6000.00
        currentBalance:
          type: number
          format: double
          description: Current balance (debt)
          example: 4000.00
        utilizationPercentage:
          type: number
          format: double
          description: Credit utilization percentage
          example: 40.00
        isActive:
          type: boolean
          description: Card active status
          example: true
    CustomerCardValidationResponse:
      type: object
      required:
        - customerId
        - hasActiveCard
        - activeCardCount
        - validatedAt
      properties:
        customerId:
          type: string
          description: Customer ID that was validated
          example: "68a0cdde7d68c910da0bc239"
        hasActiveCard:
          type: boolean
          description: Whether the customer has at least one active credit card
          example: true
        activeCardCount:
          type: integer
          description: Total number of active credit cards for this customer
          example: 1
        cardSummary:
          type: array
          description: Summary of active cards (optional, only if hasActiveCard = true)
          items:
            type: object
            properties:
              cardId:
                type: string
                example: "64f3cbb5f8a1e53d2f7c34e1"
              cardNumber:
                type: string
                example: "1234-5678-9123-4567"
              type:
                type: string
                enum: [ "CREDIT", "DEBIT" ]
                example: "CREDIT"
              creditLimit:
                type: number
                format: double
                example: 10000.00
              availableCredit:
                type: number
                format: double
                example: 6000.00
        validatedAt:
          type: string
          format: date-time
          description: Timestamp when the validation was performed
          example: "2025-08-31T15:30:00Z"
    CustomerDailyAverageResponse:
      type: object
      required:
        - customerId
        - period
        - products
        - generatedAt
      properties:
        customerId:
          type: string
          example: "68a0cdde7d68c910da0bc239"
        period:
          type: object
          properties:
            year:
              type: integer
              example: 2025
            month:
              type: integer
              example: 8
            monthName:
              type: string
              example: "August"
        products:
          type: array
          items:
            type: object
            properties:
              cardId:
                type: string
              cardNumber:
                type: string
              productType:
                type: string
                enum: [ "CREDIT_CARD" ]
              averageDailyBalance:
                type: number
                format: double
              averageDailyAvailable:
                type: number
                format: double
              totalDaysWithData:
                type: integer
              isComplete:
                type: boolean
                description: "Whether we have data for all days in the month"
        generatedAt:
          type: string
          format: date-time
    DebitCardCreateRequest:
      type: object
      properties:
        customerId:
          type: string
          example: "68a0cdde7d68c910da0bc239"
        primaryAccountId:
          type: string
          example: "acc_123456789"
        associatedAccountIds:
          type: array
          items:
            type: string
          example: [ "acc_987654321", "acc_456789123" ]
          description: Additional accounts in priority order
      required:
        - customerId
        - primaryAccountId

    DebitCardUpdateRequest:
      type: object
      properties:
        isActive:
          type: boolean
          example: true
        primaryAccountId:
          type: string
          example: "acc_123456789"
        associatedAccountIds:
          type: array
          items:
            type: string
          example: [ "acc_987654321", "acc_456789123" ]
      required:
        - isActive

    DebitCardResponse:
      type: object
      properties:
        id:
          type: string
          example: "64f3cbb5f8a1e53d2f7c34e2"
        cardNumber:
          type: string
          example: "1234-5678-9123-4568"
        customerId:
          type: string
          example: "68a0cdde7d68c910da0bc239"
        primaryAccountId:
          type: string
          example: "acc_123456789"
        associatedAccountIds:
          type: array
          items:
            type: string
          example: [ "acc_987654321", "acc_456789123" ]
        isActive:
          type: boolean
          example: true
        createdAt:
          type: string
          format: date-time
          example: "2025-08-18T10:15:30Z"
        updatedAt:
          type: string
          format: date-time
          example: "2025-08-18T10:15:30Z"

    # DEBIT CARD OPERATIONS
    AssociateAccountRequest:
      type: object
      properties:
        accountId:
          type: string
          example: "acc_789123456"
      required:
        - accountId

    DebitPurchaseRequest:
      type: object
      properties:
        amount:
          type: number
          format: double
          minimum: 0.01
          example: 150.00
        merchantInfo:
          type: string
          example: "Amazon Purchase"
        transactionType:
          type: string
          enum: [ "PURCHASE", "WITHDRAWAL", "PAYMENT" ]
          example: "PURCHASE"
      required:
        - amount
        - transactionType

    DebitPurchaseResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        transactionId:
          type: string
          example: "txn_123456789"
        cardId:
          type: string
          example: "64f3cbb5f8a1e53d2f7c34e2"
        requestedAmount:
          type: number
          format: double
          example: 150.00
        processedAmount:
          type: number
          format: double
          example: 150.00
        accountsUsed:
          type: array
          items:
            type: object
            properties:
              accountId:
                type: string
              amountDeducted:
                type: number
                format: double
              remainingBalance:
                type: number
                format: double
          example: [
            {
              "accountId": "acc_123456789",
              "amountDeducted": 100.00,
              "remainingBalance": 500.00
            },
            {
              "accountId": "acc_987654321",
              "amountDeducted": 50.00,
              "remainingBalance": 200.00
            }
          ]
        errorCode:
          type: string
          enum: [ "CARD_INACTIVE", "INSUFFICIENT_FUNDS", "INVALID_AMOUNT", "ACCOUNT_UNAVAILABLE" ]
        errorMessage:
          type: string
        processedAt:
          type: string
          format: date-time
    PrimaryAccountBalanceResponse:
      type: object
      required:
        - cardId
        - primaryAccountId
        - accountNumber
        - balance
        - currency
        - accountType
      properties:
        cardId:
          type: string
          example: "64f3cbb5f8a1e53d2f7c34e2"
        primaryAccountId:
          type: string
          example: "acc_123456789"
        accountNumber:
          type: string
          example: "0011-0123-456789"
        balance:
          type: number
          format: double
          example: 1500.50
        currency:
          type: string
          example: "PEN"
        accountType:
          type: string
          enum: [ "SAVINGS", "CHECKING" ]
          example: "SAVINGS"
        lastMovementDate:
          type: string
          format: date-time
          example: "2025-09-01T10:30:00Z"

    CardMovementsResponse:
      type: object
      required:
        - cardId
        - cardType
        - movements
        - totalCount
      properties:
        cardId:
          type: string
          example: "64f3cbb5f8a1e53d2f7c34e2"
        cardType:
          type: string
          enum: [ "CREDIT", "DEBIT" ]
          example: "DEBIT"
        movements:
          type: array
          items:
            $ref: '#/components/schemas/CardMovement'
        totalCount:
          type: integer
          example: 10
        retrievedAt:
          type: string
          format: date-time

    CardMovement:
      type: object
      properties:
        transactionId:
          type: string
          example: "txn_123456789"
        amount:
          type: number
          format: double
          example: 150.00
        transactionType:
          type: string
          enum: [ "PURCHASE", "WITHDRAWAL", "PAYMENT", "CHARGE", "AUTHORIZATION" ]
          example: "PURCHASE"
        merchantInfo:
          type: string
          example: "Amazon Purchase"
        accountsAffected:
          type: array
          items:
            type: object
            properties:
              accountId:
                type: string
              amountDeducted:
                type: number
                format: double
        processedAt:
          type: string
          format: date-time
        status:
          type: string
          enum: [ "COMPLETED", "PENDING", "FAILED" ]

    ProductEligibilityResponse:
      type: object
      required:
        - customerId
        - isEligible
        - validatedAt
      properties:
        customerId:
          type: string
          example: "68a0cdde7d68c910da0bc239"
        isEligible:
          type: boolean
          example: true
        eligibilityReasons:
          type: array
          items:
            type: string
          example: [ "NO_OVERDUE_DEBTS", "GOOD_PAYMENT_HISTORY" ]
        ineligibilityReasons:
          type: array
          items:
            type: string
          example: [ "OVERDUE_CREDIT_DEBT", "DELINQUENT_PAYMENTS" ]
        overdueProducts:
          type: array
          items:
            $ref: '#/components/schemas/OverdueProduct'
        validatedAt:
          type: string
          format: date-time

    OverdueProduct:
      type: object
      properties:
        productId:
          type: string
        productType:
          type: string
          enum: [ "CREDIT_CARD" ]
        overdueAmount:
          type: number
          format: double
        daysPastDue:
          type: integer

    CustomerCardsSummaryResponse:
      type: object
      required:
        - customerId
        - creditCards
        - debitCards
        - totalActiveCards
      properties:
        customerId:
          type: string
        creditCards:
          type: array
          items:
            $ref: '#/components/schemas/CreditCardSummary'
        debitCards:
          type: array
          items:
            $ref: '#/components/schemas/DebitCardSummary'
        totalActiveCards:
          type: integer
        retrievedAt:
          type: string
          format: date-time

    CreditCardSummary:
      type: object
      properties:
        cardId:
          type: string
        cardNumber:
          type: string
        availableCredit:
          type: number
        currentBalance:
          type: number
        isActive:
          type: boolean

    DebitCardSummary:
      type: object
      properties:
        cardId:
          type: string
        cardNumber:
          type: string
        primaryAccountId:
          type: string
        isActive:
          type: boolean

    AssociatedAccount:
      type: object
      required:
        - accountId
        - associationDate
      properties:
        accountId:
          type: string
        associationDate:
          type: string
          format: date-time

    CreditProduct:
      type: object
      properties:
        productId:
          type: string
        productType:
          type: string
        overdueAmount:
          type: number
          format: double
        daysPastDue:
          type: integer

    CardsPeriodicReportResponse:
      type: object
      required:
        - reportPeriod
        - creditCards
        - debitCards
        - generatedAt
      properties:
        reportPeriod:
          type: object
          properties:
            startDate:
              type: string
              format: date
            endDate:
              type: string
              format: date
        creditCards:
          $ref: '#/components/schemas/CreditCardsReport'
        debitCards:
          $ref: '#/components/schemas/DebitCardsReport'
        generatedAt:
          type: string
          format: date-time

    CreditCardsReport:
      type: object
      properties:
        totalActiveCards:
          type: integer
        totalTransactions:
          type: integer
        totalAmountTransacted:
          type: number
          format: double
        averageCreditUtilization:
          type: number
          format: double

    DebitCardsReport:
      type: object
      properties:
        totalActiveCards:
          type: integer
        totalTransactions:
          type: integer
        totalAmountTransacted:
          type: number
          format: double

    TransactionsSummary:
      type: object
      required:
        - totalTransactions
        - totalAmount
      properties:
        totalTransactions:
          type: integer
        totalAmount:
          type: number
          format: double
        startDate:
          type: string
          format: date
        endDate:
          type: string
          format: date

    ErrorResponse:
      type: object
      properties:
        code:
          type: string
          example: "PERSON_ALREADY_HAS_CREDIT_CARD"
        message:
          type: string
          example: "Personal customers can only have one active credit card"
        timestamp:
          type: string
          format: date-time
          example: "2025-08-24T10:15:30Z"
      required:
        - code
        - message
        - timestamp
