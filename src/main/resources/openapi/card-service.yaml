openapi: 3.0.3
info:
  title: Card Service API
  version: 1.0.0
  description: API for managing credit cards (personal and enterprise)

servers:
  - url: http://localhost:8081/api/v1

paths:
  /cards:
    get:
      summary: Get all credit cards
      operationId: getAllCreditCards
      parameters:
        - name: customerId
          in: query
          required: false
          schema:
            type: string
          description: Filter credit cards by customer ID
          example: "68a0cdde7d68c910da0bc239"
        - name: isActive
          in: query
          required: false
          schema:
            type: boolean
          description: Filter credit cards by active status (default = true)
          example: true
      responses:
        '200':
          description: List of credit cards
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CardResponse'
    post:
      summary: Create a new credit card
      operationId: createCreditCard
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CardCreateRequest'
      responses:
        '201':
          description: Credit card created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CardResponse'
        '400':
          description: Bad request - Validation errors
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: Business rule violation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                personalCreditCardExists:
                  summary: Personal customer already has a credit card
                  value:
                    code: "PERSON_ALREADY_HAS_CREDIT_CARD"
                    message: "Personal customers can only have one active credit card"
                    timestamp: "2025-08-24T10:15:30Z"
                customerNotFound:
                  summary: Customer not found
                  value:
                    code: "CUSTOMER_NOT_FOUND"
                    message: "Customer with provided ID does not exist"
                    timestamp: "2025-08-24T10:15:30Z"

  /cards/{id}:
    get:
      summary: Get a credit card by ID
      operationId: getCreditCardById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Credit card found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CardResponse'
        '404':
          description: Credit card not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      summary: Update a credit card by ID
      operationId: updateCreditCard
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CardUpdateRequest'
      responses:
        '200':
          description: Credit card updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CardResponse'
        '404':
          description: Credit card not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '400':
          description: Bad request - Validation errors
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      summary: Delete a credit card by ID
      operationId: deleteCreditCard
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Credit card deleted
        '404':
          description: Credit card not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'


  /cards/{id}/deactivate:
    patch:
      summary: Soft delete (deactivate) a credit card by ID
      description: Marks the credit card as inactive without physically removing it
      operationId: deactivateCreditCard
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Credit card deactivated (isActive set to false)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CardResponse'
        '404':
          description: Credit card not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /cards/{id}/activate:
    patch:
      summary: Reactivate a credit card by ID
      description: Marks the credit card as active again
      operationId: activateCreditCard
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Credit card activated (isActive set to true)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CardResponse'
        '404':
          description: Credit card not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /cards/{id}/reserve:
    patch:
      summary: Reserve credit for a transaction
      description: Decreases the availableCredit and increases the currentBalance if enough credit is available
      operationId: reserveCredit
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreditReservationRequest'
      responses:
        '200':
          description: Credit reserved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CardResponse'
        '400':
          description: Insufficient credit or invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Card not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
components:
  schemas:
    CardCreateRequest:
      type: object
      properties:
        cardNumber:
          type: string
          example: "1234-5678-9123-4567"
        customerId:
          type: string
          example: "68a0cdde7d68c910da0bc239"
        creditLimit:
          type: number
          format: double
          example: 10000.00
        type:
          type: string
          enum: ["PERSONAL", "ENTERPRISE"]
          example: "PERSONAL"
        availableCredit:
          type: number
          format: double
          example: 8000
        currentBalance:
          type: number
          format: double
          example: 4000
      required:
        - cardNumber
        - customerId
        - creditLimit
        - type

    CardUpdateRequest:
      type: object
      properties:
        creditLimit:
          type: number
          format: double
          example: 12000.00
        availableCredit:
          type: number
          format: double
          example: 8000
        currentBalance:
          type: number
          format: double
          example: 4000
        isActive:
          type: boolean
          example: true
      required:
        - creditLimit
        - availableCredit
        - currentBalance
        - isActive

    CreditReservationRequest:
      type: object
      properties:
        amount:
          type: number
          format: double
          example: 150.75
      required:
        - amount


    CardResponse:
      type: object
      properties:
        id:
          type: string
          example: "64f3cbb5f8a1e53d2f7c34e1"
        cardNumber:
          type: string
          example: "1234-5678-9123-4567"
        customerId:
          type: string
          example: "68a0cdde7d68c910da0bc239"
        type:
          type: string
          enum: ["PERSONAL", "ENTERPRISE"]
          example: "PERSONAL"
        creditLimit:
          type: number
          format: double
          example: 10000.00
        availableCredit:
          type: number
          format: double
          example: 6000
        currentBalance:
          type: number
          format: double
          example: 4000
        isActive:
          type: boolean
          example: true
        createdAt:
          type: string
          format: date-time
          example: 2025-08-18T10:15:30Z
        updatedAt:
          type: string
          format: date-time
          example: 2025-08-18T10:15:30Z

    ErrorResponse:
      type: object
      properties:
        code:
          type: string
          example: "PERSON_ALREADY_HAS_CREDIT_CARD"
        message:
          type: string
          example: "Personal customers can only have one active credit card"
        timestamp:
          type: string
          format: date-time
          example: "2025-08-24T10:15:30Z"
      required:
        - code
        - message
        - timestamp
